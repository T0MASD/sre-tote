- name: Check backplane health
  shell: |
    BACKPLANE_CONFIG_DIR="$HOME/.config/backplane"
    BACKPLANE_CONFIG="$BACKPLANE_CONFIG_DIR/config.json"
    PROXY_URL=$(jq -r '."proxy-url"' $BACKPLANE_CONFIG)
    BACKPLANE_URL=$(ocm get /api/clusters_mgmt/v1/environment | jq -r .backplane_url)
    curl --connect-timeout 2 --max-time 3 --proxy "$PROXY_URL" "$BACKPLANE_URL/healthz"
  changed_when: false
  register: cmd_res
  failed_when: cmd_res.stdout != "ok"

- name: Lookup cluster
  include_tasks: tasks/common/shell.yml
  vars:
    description: Lookup cluster {{ env.CLUSTER }} id
    command: |
      ocm list cluster -p search="name='{{ env.CLUSTER }}' or id='{{ env.CLUSTER }}' or external_id='{{ env.CLUSTER }}'"  --no-headers --columns id
    template_name: common/blank.md.j2

- name: Stop play if cluster is not found
  meta: end_play
  when: not cmd.stdout

- name: Get cluster describe
  include_tasks: tasks/common/shell.yml
  vars:
    description: Describe cluster {{ cmd.stdout }}
    command: |
      ocm describe cluster {{ cmd.stdout }} --json
    stdout_to_json: true
    ignore_errors: true
    template_name: common/blank.md.j2

- name: Update env with cluster_describe, CLUSTER_ID, CLUSTER_NAME, HOSTED_CP, PRIVATELINK
  include_tasks: tasks/common/update_env.yml
  vars:
    env_updates:
      cluster_describe: '{{ cmd.json }}'
      CLUSTER_ID: '{{ cmd.json.id }}'
      CLUSTER_UUID: '{{ cmd.json.external_id }}'
      CLUSTER_NAME: '{{ cmd.json.name }}'
      HOSTED_CP: '{{ cmd.json.hypershift.enabled }}'
      PRIVATELINK: '{{ cmd.json.aws.private_link | default(False) }}'
      LIMITED_SUPPORT_COUNT: '{{ cmd.json.status.limited_support_reason_count | default(0) }}'

- name: Get cluster describe
  include_tasks: tasks/common/shell.yml
  vars:
    description: Describe cluster
    command: |
      ocm describe cluster {{ env.CLUSTER_ID }}

- name: Get cluster add-ons
  include_tasks: tasks/common/shell.yml
  vars:
    description: Describe cluster
    command: |
      ocm addons cluster info {{ env.CLUSTER_UUID }} --no-color
    ignore_errors: true

- name: Get cluster service logs
  include_tasks: tasks/common/shell.yml
  vars:
    description: Get cluster service logs
    command: |
      ocm get /api/service_logs/v1/clusters/cluster_logs \
      -p cluster_uuid="{{ env.CLUSTER_UUID }}" \
      -p search="timestamp > '$(date --iso-8601=seconds --utc -d '-10 days')'" \
      | jq -r '.items[] | [.timestamp, .severity, .summary, .description] | @tsv'

- name: Get cluster limited support reasons
  include_tasks: tasks/common/shell.yml
  vars:
    description: Get cluster limited support
    command: |
      ocm get /api/clusters_mgmt/v1/clusters/{{ env.CLUSTER_ID }}/limited_support_reasons \
      | jq -r '.items[] | [.creation_timestamp, .summary, .details] | @tsv'
  when: env.LIMITED_SUPPORT_COUNT | int > 0

- name: Get cluster provision shard
  include_tasks: tasks/common/shell.yml
  vars:
    description: 'Get cluster provision shard'
    command: |
      ocm get /api/clusters_mgmt/v1/clusters/{{ env.CLUSTER_ID }}/provision_shard
    stdout_to_json: true

- name: Update env
  include_tasks: tasks/common/update_env.yml
  vars:
    env_updates:
      provision_shard: '{{ cmd.json }}'

- name: Add service cluster name from {{ env.provision_shard.hypershift_config.server }}
  include_tasks: tasks/common/update_env.yml
  vars:
    env_updates:
      SC_NAME: '{{ env.provision_shard.hypershift_config.server.split(".")[1] }}'
  when: env.provision_shard.hypershift_config is defined

- name: Add hive name from {{ env.provision_shard.hive_config.server }}
  include_tasks: tasks/common/update_env.yml
  vars:
    env_updates:
      HIVE_NAME: '{{ env.provision_shard.hive_config.server.split(".")[1] }}'
  when: env.provision_shard.hive_config is defined

- name: "Run hypershift queries"
  when: env.HOSTED_CP
  block:
    - name: Get hypershift info
      include_tasks: tasks/common/shell.yml
      vars:
        description: 'Cluster hypershift info'
        command: |
          ocm get /api/clusters_mgmt/v1/clusters/{{ env.CLUSTER_ID }}/hypershift
        stdout_to_json: true

    - name: Update env with MC_NAME, HCP_NAMESPACE
      include_tasks: tasks/common/update_env.yml
      vars:
        env_updates:
          MC_NAME: '{{ cmd.json.management_cluster }}'
          HCP_NAMESPACE: '{{ cmd.json.hcp_namespace }}'
